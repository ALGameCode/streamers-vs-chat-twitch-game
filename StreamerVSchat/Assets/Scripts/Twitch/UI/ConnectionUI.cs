using System.Collections;
using Twitch.Connection;
using UnityEngine;
using UnityEngine.UI;

namespace Twitch.UI
{
    public class ConnectionUI : MonoBehaviour
    {
        #region vars
        [Header("Twitch Connection UI: ")]

        [Tooltip("Inputfield where the streamer fills in his username.")]
        [SerializeField]
        private InputField userNameInput;

        [Tooltip("Inputfield where the streamer fills in their channel name.")]
        [SerializeField]
        private InputField channelNameInput;

        [Tooltip("Inputfield where the streamer fills in the password generated by OAuth.")]
        [SerializeField]
        private InputField passwordInput;

        [Tooltip("Text where it shows the current state of the connection to twitch.")]
        [SerializeField]
        private Text connectionStatusText;

        [Tooltip("Connection status text color if disconnected.")]
        [SerializeField]
        private Color disconnectedColor;

        [Tooltip("Connection status text color if connected.")]
        [SerializeField]
        private Color connectedColor;

        [Tooltip("Time in seconds to close the popup UI after connection.")]
        [SerializeField]
        private float timerToCloseUI = 5f;

        [Tooltip("Message shown when connection is made.")]
        [SerializeField]
        private string messageSuccessfullyConnection = "Successfully";

        #endregion vars

        private void Start()
        {
            connectionStatusText.color = disconnectedColor;
            LoadConnectionInfo();
        }

        private void Update()
        {
            if (TwitchConnection.IsConnected)
            {
                if (TwitchConnection.IsValidConnection())
                {
                    UpdateConnectionUI();
                }
            }
        }

        /// <summary>
        /// Updates the connection UI by setting the connection status, retrieving player stream name, saving player connection info, and initiating the wait to close connection popup.
        /// </summary>
        private void UpdateConnectionUI()
        {
            UpdateConnectionStatus(messageSuccessfullyConnection, connectedColor);
            PlayerStatus.instance.GetPlayerStreamName();
            Save.instance.SaveConnectPlayerInfo(userNameInput.text, channelNameInput.text);
            StartCoroutine(WaitAndCloseConnectionPopUp());
        }

        /// <summary>
        /// Updates the connection status text with the given message and color.
        /// </summary>
        /// <param name="message">The message to display.</param>
        /// <param name="color">The color of the text.</param>
        private void UpdateConnectionStatus(string message, Color color)
        {
            connectionStatusText.text = message;
            connectionStatusText.color = color;
        }

        /// <summary>
        /// Waits for a specified amount of time and then closes the connection pop-up.
        /// </summary>
        private IEnumerator WaitAndCloseConnectionPopUp()
        {
            yield return new WaitForSeconds(timerToCloseUI);
            this.gameObject.SetActive(false);
        }

        /// <summary>
        /// Establishes a connection to the chat using the provided user credentials and channel name.
        /// </summary>
        public void ConnectChat()
        {
            TwitchConnection.SetConnection(userNameInput.text.ToString(), passwordInput.text, channelNameInput.text);
        }

        /// <summary>
        /// Opens the specified URL in the default web browser.
        /// </summary>
        /// <param name="url">The URL to be opened.</param>
        public void OpenURL(string url)
        {
            Application.OpenURL(url);
        }

        /// <summary>
        ///  Loads the connection information from player preferences.
        /// </summary>
        private void LoadConnectionInfo()
        {
            if (PlayerPrefs.HasKey("username"))
            {
                string savedUsername = PlayerPrefs.GetString("username");
                string savedChannelname = PlayerPrefs.GetString("channelname");

                UpdateInputFields(savedUsername, savedChannelname);
            }
        }

        /// <summary>
        /// Updates the input fields with the provided username and channel name values.
        /// </summary>
        /// <param name="username">The username value to set in the input field.</param>
        /// <param name="channelname">The channel name value to set in the input field.</param>
        private void UpdateInputFields(string username, string channelname)
        {
            userNameInput.text = username;
            channelNameInput.text = channelname;
        }
    }
}